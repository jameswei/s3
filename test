#!/usr/bin/env python

import hmac
import os
import re
import sha
import StringIO
import sys
import unittest

class _stderr(object):
  def write(self, msg):
    self.message = msg.strip()

class S3(object):
  STDERR = sys.stderr

  def __init__(self, method, src=None, dest=None, hash=False, url=False, ttl=30):
    self.method = method.upper()
    self.src    = S3.path(src)
    self.dest   = S3.path(dest)
    self.hash   = hash
    self.ttl    = ttl

    d = [p.startswith("s3://") for p in [self.src, self.dest]]
    if method == "GET" and d != [True, False]:
      S3.exit("error: GET must be s3://... => file", 2)
    if method == "PUT" and d != [True, False]:
      S3.exit("error: PUT must be file => s3://...", 2)

  @staticmethod
  def exit(msg, code=1):
    S3.STDERR.write(msg.strip() + "\n")
    sys.exit(code)

  @staticmethod
  def hash(p):
    k = os.environ.get("S3_PATH_KEY")

    if not k:
      S3.exit("error: S3_PATH_KEY not set", 2)

    k = k.split(":", 1)
    if len(k) != 2:
      S3.exit("error: S3_PATH_KEY not in v1:c39c... format", 2)

    m   = re.compile("^(s3://[^\/]+)(.*)").match(p)
    b,p = m.groups()
    return "%s/%s/%s" % (b, k[0], hmac.new(k[1], p, sha).hexdigest())

  @staticmethod
  def path(p):
    d,f = os.path.split(p)
    m   = re.compile("^(\S+)://").match(p)

    if d == "s3:" or f == "" or os.path.isdir(p):
      S3.exit("error: path %s not a file" % p, 2)

    if m:
      if m.group(1) != "s3":
        S3.exit("error: path must use s3:// scheme", 2)
      return p

    p = os.path.abspath(p)
    d,f = os.path.split(p)

    if not os.path.exists(d):
      S3.exit("error: directory %s does not exist" % d, 2)

    return p

class TestS3(unittest.TestCase):
  def setUp(self):
    S3.STDERR = _stderr()

  def tearDown(self):
    S3.STDERR = sys.stderr

  def test_initialize(self):
    S3("GET", src="s3://mybucket/test", dest="/tmp/test")
    S3("PUT", src="s3://mybucket/test", dest="/tmp/test")

    with self.assertRaises(SystemExit) as c:
      S3("GET", src="/tmp/test", dest="s3://mybucket/test")
    self.assertEqual(c.exception.code, 2)
    self.assertEqual(S3.STDERR.message, "error: GET must be s3://... => file")

    with self.assertRaises(SystemExit) as c:
      S3("PUT", src="/tmp/test", dest="s3://mybucket/test")
    self.assertEqual(S3.STDERR.message, "error: PUT must be file => s3://...")

  def test_file_path(self):
    with self.assertRaises(SystemExit) as c:
      S3.path("/tmp")
    self.assertEqual(c.exception.code, 2)
    self.assertEqual(S3.STDERR.message, "error: path /tmp not a file")

    self.assertEqual(S3.path("/tmp/test"), "/tmp/test")

    with self.assertRaises(SystemExit) as c:
      S3.path("/tmp/test/")
    self.assertEqual(S3.STDERR.message, "error: path /tmp/test/ not a file")

    with self.assertRaises(SystemExit) as c:
      S3.path("/tmp/x/test")
    self.assertEqual(S3.STDERR.message, "error: directory /tmp/x does not exist")

    self.assertEqual(S3.path("/tmp/x/../test"), "/tmp/test")

  def test_s3_path(self):
    with self.assertRaises(SystemExit) as c:
      S3.path("s3://mybucket")
    self.assertEqual(c.exception.code, 2)
    self.assertEqual(S3.STDERR.message, "error: path s3://mybucket not a file")

    with self.assertRaises(SystemExit) as c:
      S3.path("s3://mybucket/")
    self.assertEqual(S3.STDERR.message, "error: path s3://mybucket/ not a file")

    self.assertEqual(S3.path("s3://mybucket/test"), "s3://mybucket/test")

    with self.assertRaises(SystemExit) as c:
      S3.path("s3://mybucket/test/")
    self.assertEqual(S3.STDERR.message, "error: path s3://mybucket/test/ not a file")

    self.assertEqual(S3.path("s3://mybucket/x/test"), "s3://mybucket/x/test")

    with self.assertRaises(SystemExit) as c:
      S3.path("s4://mybucket/test")
    self.assertEqual(S3.STDERR.message, "error: path must use s3:// scheme")

  def test_hash_path(self):
    with self.assertRaises(SystemExit) as c:
      S3.hash("s3://mybucket/test")
    self.assertEqual(S3.STDERR.message, "error: S3_PATH_KEY not set")

    os.environ["S3_PATH_KEY"] = "5214e99480b444e1fb272486e9e44fa4"
    with self.assertRaises(SystemExit) as c:
      S3.hash("s3://mybucket/test")
    self.assertEqual(S3.STDERR.message, "error: S3_PATH_KEY not in v1:c39c... format")

    os.environ["S3_PATH_KEY"] = "v1:5214e99480b444e1fb272486e9e44fa4"
    self.assertEqual(S3.hash("s3://mybucket/test"), "s3://mybucket/v1/d94b0959c7bd2478fc2f6cb82b7e8a5bf0ba25d8")

    os.environ["S3_PATH_KEY"] = "v2:2539eb9f5257b4608b106c568ab3d5fe"
    self.assertEqual(S3.hash("s3://mybucket/test"), "s3://mybucket/v2/8740785198f0a8cd01cfb6f8a48bd594e326b9c2")

class TestS3Args(unittest.TestCase):
  pass

if __name__ == "__main__":
    unittest.main()
